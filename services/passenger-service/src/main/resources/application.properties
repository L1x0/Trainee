spring.application.name=${SPRING_APPLICATION_NAME:PassengerService}

server.port=${SERVER_PORT:8080}

eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICEURL_DEFAULTZONE:http://eureka:8761/eureka/}
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

eureka.instance.instanceId=${EUREKA_INSTANCE_INSTANCEID:${spring.application.name}:${random.value}}
eureka.instance.prefer-ip-address=false

management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

resilience4j.circuitbreaker.instances.tripService.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.tripService.slidingWindowSize=20
resilience4j.circuitbreaker.instances.tripService.minimumNumberOfCalls=4
resilience4j.circuitbreaker.instances.tripService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.tripService.waitDurationInOpenState=20s
resilience4j.circuitbreaker.instances.tripService.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.tripService.slowCallDurationThreshold=2s
resilience4j.circuitbreaker.instances.tripService.slowCallRateThreshold=50
# Exceptions to record as failures (comma-separated)
resilience4j.circuitbreaker.instances.tripService.recordExceptions=java.io.IOException
# Exceptions to ignore (comma-separated) ? example: 404s
resilience4j.circuitbreaker.instances.tripService.ignoreExceptions=org.springframework.web.client.HttpClientErrorException


spring.kafka.bootstrap-servers=kafka:9092

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=5

spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.max.in.flight.requests.per.connection=1

spring.kafka.producer.transaction-id-prefix=passenger-tx-
spring.kafka.producer.properties.spring.json.add.type.headers=false

spring.kafka.consumer.group-id=passenger-service-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=false

spring.kafka.consumer.properties.isolation.level=read_committed

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.use.type.headers=false
spring.kafka.consumer.properties.spring.json.value.default.type=by.astakhau.trainee.passengerservice.dtos.TripResponseDto
spring.kafka.consumer.properties.spring.json.trusted.packages=by.astakhau.trainee.passengerservice.dtos



spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://postgres:5432/passengers_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:passengers_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:dev}

spring.datasource.driver-class-name=org.postgresql.Driver

spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.yaml
spring.liquibase.enabled=true

spring.jpa.hibernate.ddl-auto=none