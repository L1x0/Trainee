services:

  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    ports:
      - "5432:5432"


  eureka:
    build:
      context: ../services/eureka-service
      dockerfile: Dockerfile
    image: eureka-server:local
    container_name: eureka
    ports:
      - "8761:8761"
    networks:
      - backend

  driver-service:
    build:
      context: ../services/driver-service
      dockerfile: Dockerfile
    image: driver-service:local
    container_name: driver-service
    depends_on:
      - eureka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=driver-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_INSTANCEID=driver-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/drivers_db
      - SPRING_DATASOURCE_USERNAME=drivers_user
      - SPRING_DATASOURCE_PASSWORD=dev
      - SERVER_PORT=8080
    ports:
      - "8081:8080"
      - "9090:9090"
    networks:
      - backend

  gateway-service:
    build:
      context: ../services/gateway-service
      dockerfile: Dockerfile
    image: gateway-service:local
    container_name: gateway-service
    depends_on:
      - eureka
      - postgres
      - passenger-service
      - driver-service
      - trip-service
      - rating-service
    environment:
      - SPRING_APPLICATION_NAME=gateway-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_INSTANCEID=gateway-service
    ports:
      - "8080:8080"
    networks:
      - backend

  passenger-service:
    build:
      context: ../services/passenger-service
      dockerfile: Dockerfile
    image: passenger-service:local
    container_name: passenger-service
    depends_on:
      - eureka
      - postgres
      - kafka
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=passenger-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_INSTANCEID=passenger-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/passengers_db
      - SPRING_DATASOURCE_USERNAME=passengers_user
      - SPRING_DATASOURCE_PASSWORD=dev
      - SERVER_PORT=8080
    ports:
      - "8082:8080"
    networks:
      - backend

  trip-service:
    build:
      context: ../services/trip-service
      dockerfile: Dockerfile
    image: trip-service:local
    container_name: trip-service
    depends_on:
      - kafka
      - eureka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=trip-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_INSTANCEID=trip-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/trips_db
      - SPRING_DATASOURCE_USERNAME=trips_user
      - SPRING_DATASOURCE_PASSWORD=dev
      - SERVER_PORT=8080
    ports:
      - "8083:8080"
    networks:
      - backend

  rating-service:
    build:
      context: ../services/rating-service
      dockerfile: Dockerfile
    image: rating-service:local
    container_name: rating-service
    depends_on:
      - eureka
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_APPLICATION_NAME=rating-service
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - EUREKA_INSTANCE_INSTANCEID=rating-service
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/trips_rating_db
      - SPRING_DATASOURCE_USERNAME=trips_rating_user
      - SPRING_DATASOURCE_PASSWORD=dev
      - SERVER_PORT=8080
    ports:
      - "8084:8080"
    networks:
      - backend

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend


  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    networks:
      - backend


  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-init
    depends_on:
      - kafka
    # Список команд: ждём, пока broker отдаст список топиков, затем создаём нужные темы.
    command: >
      sh -c '
      echo "creating topics (if not exists)...";
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic trips.make --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic trips.created --partitions 3 --replication-factor 1;
      echo "topics created";
      '
    restart: "no"
    networks:
      - backend

  kafdrop:
    image: obsidiandynamics/kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    networks:
      - backend


#  redis:
#    image: redis:7
#    ports:
#      - "6379:6379"
#
#  mongo:
#    image: mongo:6
#    ports:
#      - "27017:27017"
#    volumes:
#      - mongodata:/data/db

#  prometheus:
#    image: prom/prometheus:v2.45.0
#    volumes:
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#    ports:
#      - "9090:9090"
#
#  grafana:
#    image: grafana/grafana:latest
#    environment:
#      GF_SECURITY_ADMIN_PASSWORD: "grafana"
#    ports:
#      - "3000:3000"
#
#  loki:
#    image: grafana/loki:2.8.2
#    ports:
#      - "3100:3100"

networks:
  backend:
    driver: bridge

volumes:
  pgdata:
#  mongodata:
